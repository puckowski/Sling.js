let modInit=!1;s._rt||(s._rt=1,modInit=!0);const router={segmentArr:[],routeMap:new Map,params:null};Object.seal(router),s.router=router;const setUrlSegments=()=>{let t=window.location.href.split("#")[1];if(router.segmentArr.splice(0,router.segmentArr.length),t){t.split("/").forEach(t=>{router.segmentArr.push(t)})}};export function getRouteSegments(){return router.segmentArr}export function getRouteParams(){return router.params}export function getRoute(){return window.location.href.split("#")[1]}modInit&&(s.getRoute=getRoute);export function addRoute(t,e){router.routeMap.set(new RegExp("^"+t.replace(/:[^\/]+/g,"([^\\/]+)")+"$"),e)}export function route(t,e={},r=!0){router.params=e;let o=null;return router.routeMap.forEach((e,n)=>{if(n.test(t)){if(e.authGuard&&!e.authGuard(n))return e.authFail&&(o=s.route(e.authFail.route,e.authFail.params)),void(t=void 0);s.destroyFuncArr.forEach(t=>{t()}),s.destroyFuncArr=[],window.location.hash=t,setUrlSegments();let u=document.getElementById(e.root);e.component&&(s.mountInternal(u,e.component,r),e.component.slOnDestroy&&s.destroyFuncArr.push(e.component.slOnDestroy),o=e.component)}}),s.changeDetector.changeDetectionStrategy===s.CHANGE_STRATEGY_AUTOMATIC&&s.performChangeDetection(),o}modInit&&(s.route=route),setUrlSegments();